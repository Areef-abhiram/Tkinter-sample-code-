try:
    from Tkinter import *
except ImportError:
    from tkinter import *
import tkinter as tk
from tkinter import *
from tkinter import ttk
import os

root = Tk()
root.title('Soujhe Innovative Healthcare Devices Pvt. Ltd')
root.state('zoomed')



dialog_button_font="Calibri 13 bold"
dialog_body_font="calibri 16"

button2 =Button(root, text="Exit", bg="#007ED9", fg="white", font=('Helvetica', '15'),
                      command=lambda: on_closing(), width=15, activebackground='blue', cursor="hand2")
button2.place(x=320, y=270)
# +++++++++++++++++Custom Dialoguebox++++++++++++++++++++++
class dialoguebox:

    def __init__(self, master,
                 text='', buttons=[], default=None, cancel=None,title=None, class_=None,icon=None):
        if class_:
            self.root = Toplevel(master, class_=class_)
        else:
            self.root = Toplevel(master)
        if title:
            self.root.title(title)
            self.root.iconname(title)


        self.message = Message(self.root, text=text,aspect=700,font=dialog_body_font,bg="white")
        self.message.pack(expand=True, fill=BOTH)
        self.frame =tk.Frame(self.root)
        self.frame.pack(fill='both',expand=0)
        self.num = default
        self.cancel = cancel
        self.default = default
        self.root.bind('<Return>', self.return_event)
        for num in range(len(buttons)):
            s = buttons[num]
            b =Button(self.frame, text=s,command=(lambda self=self, num=num: self.done(num)),bg="#007ED9",fg="white",borderwidth=1,width=10,font=dialog_button_font,activebackground='blue',
                                         cursor="hand2")

            # infuture we need more buttons to add in popup disable from add below code and remove the **** to **** code in comments
            # b = Button(self.frame, text=s,
            #            command=(lambda self=self, num=num: self.done(num)), bg="#007ED9", fg="white", borderwidth=2,
            #            width=6, font="Times 15 bold")
            # if num == default:
            #     b.config(relief=RAISED, borderwidth=2, bg="#007ED9")
            # b.pack(side=LEFT, expand=1, padx=10, pady=10)
            # *************
            if num == default:
                b.config(relief=RAISED, borderwidth=1)
                # b.pack(side=LEFT,padx=10,pady=10)
                # b.place(x=10, y=15)
                b.pack(pady=10)
            # b.pack(side="right", fill=None,expand=True,padx=1,pady=8)
            else:
                b.place(x=270,y=10)
                # b.pack(side="right",padx=10,pady=10)
            #**************

        self.root.protocol('WM_DELETE_WINDOW', self.wm_delete_window)
        self._set_transient(master,icon)

    def _set_transient(self, master,icon, relx=0.45, rely=0.4):
        widget = self.root
        widget.withdraw() # Remain invisible while we figure out the geometry
        widget.transient(master)
        widget.update_idletasks()
        # Actualize geometry information
        widget.geometry('400x200')
        if master.winfo_ismapped():
            m_width = master.winfo_width()
            m_height = master.winfo_height()
            m_x = master.winfo_rootx()
            m_y = master.winfo_rooty()
        else:
            m_width = master.winfo_screenwidth()
            m_height = master.winfo_screenheight()
            m_x = m_y = 0
        w_width = widget.winfo_reqwidth()
        w_height = widget.winfo_reqheight()
        x = m_x + (m_width - w_width) * relx
        y = m_y + (m_height - w_height) * rely
        if x+w_width > master.winfo_screenwidth():
            x = master.winfo_screenwidth() - w_width
        elif x < 0:
            x = 0
        if y+w_height > master.winfo_screenheight():
            y = master.winfo_screenheight() - w_height
        elif y < 0:
            y = 0

        widget.geometry("+%d+%d" % (x, y))
        img = PhotoImage(file=icon)
        widget.tk.call('wm', 'iconphoto', widget._w, img)
        widget.deiconify() # Become visible at the desired location

    def go(self):
        self.root.wait_visibility()
        self.root.grab_set()
        # self.root.mainloop()
        self.root.wait_window()           # importent (altenative for mainloop)
        # print(self.num)
        return self.num


    def return_event(self, event):
        if self.default is None:
            self.root.bell()
        else:
            self.done(self.default)

    def wm_delete_window(self):
        if self.cancel is None:
            self.root.bell()
        else:
            self.done(self.cancel)

    def done(self, num):
        self.num = num
        self.root.destroy()
        # print(num)
        print(self.num)

def on_closing():

        d = dialoguebox(root, text="Do you want to exit the application?", buttons=["Yes", "No"], default=0,
                        cancel=2, title="warn", icon='Pictures/warn.png')
        if (d.go()) == 0:
                os.system("taskkill /f /im python.exe 1>nul")
                os._exit(0)

w, h = root.winfo_screenwidth(), root.winfo_screenheight()
root.geometry("%dx%d+0+0" % (w, h))
root.state('zoomed')
root.protocol("WM_DELETE_WINDOW", on_closing)
img = PhotoImage(file='Pictures/icon_s.png')
root.tk.call('wm', 'iconphoto', root._w, img)
root.mainloop()
